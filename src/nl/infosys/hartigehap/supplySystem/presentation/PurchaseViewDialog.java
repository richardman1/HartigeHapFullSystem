/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nl.infosys.hartigehap.supplySystem.presentation;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import nl.infosys.hartigehap.supplySystem.businesslogic.IngredientManager;
import nl.infosys.hartigehap.supplySystem.businesslogic.PurchaseManager;
import nl.infosys.hartigehap.supplySystem.businesslogic.PurchaseManager.Status;
import nl.infosys.hartigehap.supplySystem.domain.Interface_PurchaseOrderReadOnly;
import nl.infosys.hartigehap.supplySystem.domain.Interface_SupplierReadOnly;
import nl.infosys.hartigehap.supplySystem.domain.PurchaseOrderLine;
import nl.infosys.hartigehap.supplySystem.presentation.PurchaseOverviewPanel.PresentationType;

/**
 *
 * @author Gregor
 */
public class PurchaseViewDialog extends javax.swing.JDialog
{

    private static final int NAME_COLUMN = 0;
    private static final int AMOUNT_COLUMN = 1;
    private static final int PRICE_COLUMN = 2;
    private static final int SUBTOTAL_COLUMN = 3;
    private IngredientManager ingredientManager;
    private PurchaseManager purchaseManager;
    private PresentationType type;
    private CustomPurchaseCellRenderer tableRenderer;
    private CustomTableDataModel tableModel;
    private DefaultComboBoxModel<String> comboboxModel;
    private Map<Integer, Boolean> isRowEdited;

    private int orderId;
    private boolean dialogResult;

    /**
     * Creates new form ViewDialog
     *
     * @param parent
     * @param ingredientManager
     * @param purchaseManager
     * @param type
     * @param orderId
     */
    public PurchaseViewDialog(java.awt.Frame parent, IngredientManager ingredientManager, PurchaseManager purchaseManager, PresentationType type, int orderId)
    {
        super(parent, true);
        this.ingredientManager = ingredientManager;
        this.purchaseManager = purchaseManager;
        this.type = type;
        this.orderId = orderId;
        dialogResult = false;

        tableRenderer = new CustomPurchaseCellRenderer();
        tableModel = new CustomTableDataModel(getHeaders());
        comboboxModel = new DefaultComboBoxModel(new String[]
        {
            purchaseManager.getOrder(orderId).getStatus().getPresentationString()
        });

        initComponents();
        getData();

        tableModel.addTableModelListener(new ModelListener());

        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((dim.width / 2) - (this.getSize().width / 2), (dim.height / 2) - (this.getSize().height / 2));

        //System.out.println(renderer.getCellHeight(table_productTable, 0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        label_total = new javax.swing.JLabel();
        label_totalAmount = new javax.swing.JLabel();
        label_address = new javax.swing.JLabel();
        label_businessName = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        button_terug = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        combobox_status = new javax.swing.JComboBox();
        label_status = new javax.swing.JLabel();
        button_save = new javax.swing.JButton();
        button_aanpassen = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_products = new nl.infosys.hartigehap.supplySystem.presentation.CustomJTable();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(700, 400));

        label_total.setText("Totaal:");
        label_total.setVisible(type == PresentationType.ORDERS);

        label_totalAmount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        label_totalAmount.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 5));
        label_totalAmount.setVisible(label_total.isVisible());

        jLabel4.setText("Adres:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Producten:");

        jLabel3.setText("Naam:");

        button_terug.setText("Terug");
        button_terug.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button_terugActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Leverancier:");

        combobox_status.setModel(comboboxModel);
        combobox_status.setEnabled(false);
        combobox_status.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                combobox_statusItemStateChanged(evt);
            }
        });

        label_status.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        label_status.setText("Status:");

        button_save.setText("Opslaan");
        button_save.setVisible(false);
        button_save.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button_saveActionPerformed(evt);
            }
        });

        button_aanpassen.setText("Aanpassen");
        Status status = purchaseManager.getOrder(orderId).getStatus();
        button_aanpassen.setVisible(status == Status.ORDERED || status == Status.OPEN);
        button_aanpassen.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button_aanpassenActionPerformed(evt);
            }
        });

        table_products.setModel(tableModel);
        table_products.setDefaultRenderer(Object.class, tableRenderer);
        table_products.setRowSorter(null);
        jScrollPane3.setViewportView(table_products);
        table_products.getColumnModel().getColumn(0).setPreferredWidth(1000);
        table_products.getColumnModel().getColumn(1).setPreferredWidth(300);
        if(type==PresentationType.ORDERS)
        {
            table_products.getColumnModel().getColumn(2).setPreferredWidth(300);
            table_products.getColumnModel().getColumn(3).setPreferredWidth(300);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(label_status, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(combobox_status, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(label_businessName, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(label_address, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(button_terug, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(173, 173, 173)
                                        .addComponent(button_aanpassen, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(label_total)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(button_save, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label_totalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(10, 10, 10))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(combobox_status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_status))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label_businessName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(label_address, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(filler1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label_totalAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label_total, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_terug)
                    .addComponent(button_save)
                    .addComponent(button_aanpassen))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_terugActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button_terugActionPerformed
    {//GEN-HEADEREND:event_button_terugActionPerformed
        this.dispose();
    }//GEN-LAST:event_button_terugActionPerformed

    private void button_aanpassenActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button_aanpassenActionPerformed
    {//GEN-HEADEREND:event_button_aanpassenActionPerformed
        tableModel.setColumsEditable(new int[]
        {
            2, 3
        });
        label_status.setText("Nieuwe status:");
        for (Status status : purchaseManager.getNewStatus(purchaseManager.getOrder(orderId).getStatus()))
        {
            comboboxModel.addElement(status.getPresentationString());
        }
        combobox_status.setEnabled(true);
        button_save.setVisible(true);
        button_aanpassen.setVisible(false);
    }//GEN-LAST:event_button_aanpassenActionPerformed

    private void button_saveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button_saveActionPerformed
    {//GEN-HEADEREND:event_button_saveActionPerformed
        Interface_PurchaseOrderReadOnly order = purchaseManager.getOrder(orderId);
        String ingredientName = "";
        int amount = 0;
        double price = 0.0;
        NumberFormat formatter = new DecimalFormat("€ ###,##0.00");

        //Eerst alle rijen controleren
        for (int x = 0; x < tableModel.getRowCount(); x++)
        {
            try
            {
                tableModel.getValueAt(x, NAME_COLUMN).toString();
                if (Integer.parseInt(tableModel.getValueAt(x, AMOUNT_COLUMN).toString()) < 1)
                {
                    JOptionPane.showMessageDialog(rootPane, "Een aantal mag niet op nul staan.");
                    return;
                }
                if (type == PresentationType.ORDERS || comboboxModel.getSelectedItem().toString().equals(Status.ORDERED.getPresentationString()))
                {
                    if (formatter.parse(tableModel.getValueAt(x, PRICE_COLUMN).toString()).doubleValue() < 0.01)
                    {
                        JOptionPane.showMessageDialog(rootPane, "Een prijs mag niet lager dan één cent zijn..");
                        return;
                    }
                }
            }
            catch (ClassCastException | ParseException e)
            {
                JOptionPane.showMessageDialog(rootPane, "Er staan ongeldige waardes in de tabel.");
                return;
            }
        }

        //Alle rijen in de order vervangen met de data in de tabel.
        //System.out.println(tableModel.getRowCount());
        for (int x = 0; x < tableModel.getRowCount(); x++)
        {
            try
            {
                ingredientName = tableModel.getValueAt(x, NAME_COLUMN).toString();
                amount = Integer.parseInt(tableModel.getValueAt(x, AMOUNT_COLUMN).toString());
                if (type == PresentationType.ORDERS || comboboxModel.getSelectedItem().toString().equals(Status.ORDERED.getPresentationString()))
                {
                    price = formatter.parse(tableModel.getValueAt(x, PRICE_COLUMN).toString()).doubleValue();
                }
            }
            catch (ClassCastException | ParseException e)
            {
            }

            purchaseManager.replaceOrderLine(orderId, x, ingredientManager.getIngredient(ingredientName), amount, price);
        }

        //Status veranderen indien nodig;
        if (!comboboxModel.getSelectedItem().toString().trim().equals(order.getStatus().getPresentationString()))
        {
            purchaseManager.changeStatus(orderId, comboboxModel.getSelectedItem().toString().trim());
        }

        purchaseManager.saveOrder(orderId);

        JOptionPane.showMessageDialog(rootPane, "De wijzigingen zijn opgeslagen.");
        dialogResult = true;
        this.dispose();
    }//GEN-LAST:event_button_saveActionPerformed

    private void combobox_statusItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_combobox_statusItemStateChanged
    {//GEN-HEADEREND:event_combobox_statusItemStateChanged
        if (evt.getItem().equals(Status.ORDERED.getPresentationString()) || evt.getItem().equals(Status.DELIVERD.getPresentationString()))
        {
            type = PresentationType.ORDERS;
            tableModel = new CustomTableDataModel(getHeaders());
            label_total.setVisible(true);
            label_totalAmount.setVisible(true);
        }
        else
        {
            type = PresentationType.QUOTATIONS;
            tableModel = new CustomTableDataModel(getHeaders());
            label_total.setVisible(false);
            label_totalAmount.setVisible(false);
        }
        table_products.setModel(tableModel);
        table_products.getColumnModel().getColumn(0).setPreferredWidth(1000);
        table_products.getColumnModel().getColumn(1).setPreferredWidth(300);
        if (type == PresentationType.ORDERS)
        {
            table_products.getColumnModel().getColumn(2).setPreferredWidth(300);
            table_products.getColumnModel().getColumn(3).setPreferredWidth(300);
        }
        tableModel.setColumsEditable(new int[]
        {
            2, 3
        });
        getData();
        tableModel.addTableModelListener(new ModelListener());
    }//GEN-LAST:event_combobox_statusItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_aanpassen;
    private javax.swing.JButton button_save;
    private javax.swing.JButton button_terug;
    private javax.swing.JComboBox combobox_status;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel label_address;
    private javax.swing.JLabel label_businessName;
    private javax.swing.JLabel label_status;
    private javax.swing.JLabel label_total;
    private javax.swing.JLabel label_totalAmount;
    private nl.infosys.hartigehap.supplySystem.presentation.CustomJTable table_products;
    // End of variables declaration//GEN-END:variables

    private void getData()
    {
        NumberFormat formatter = new DecimalFormat("€ ###,##0.00");
        tableModel.setRowCount(0);
        Interface_PurchaseOrderReadOnly order = purchaseManager.getOrder(orderId);
        for (PurchaseOrderLine line : order.getOrderlines())
        {
            Object[] content = (type == PresentationType.ORDERS)
                    ? new Object[]
                    {
                        line.getIngredient().getName(), line.getAmount(), formatter.format(line.getPrice()), formatter.format(line.getLineTotal())
                    }
                    : new Object[]
                    {
                        line.getIngredient().getName(), line.getAmount()
                    };
            tableModel.addRow(content);
        }
        table_products.updateRowHeight();

        Interface_SupplierReadOnly supplier = order.getSupplier();
        label_businessName.setText(supplier.getName());
        label_address.setText(supplier.getAddress());
        label_totalAmount.setText(formatter.format(order.getTotalPrice()));
    }

    public boolean getDialogResult()
    {
        return dialogResult;
    }

    private class ModelListener implements TableModelListener
    {

        @Override
        public void tableChanged(TableModelEvent e)
        {
            tableModel.removeTableModelListener(this);

            int amount;
            double price;
            double subTotal;
            int affectedRow = e.getFirstRow();
            NumberFormat formatter = new DecimalFormat("€ ###,##0.00");

            try
            {
                amount = Integer.parseInt(tableModel.getValueAt(affectedRow, AMOUNT_COLUMN).toString());
                if (type == PresentationType.ORDERS)
                {
                    price = formatter.parse(tableModel.getValueAt(affectedRow, PRICE_COLUMN).toString()).doubleValue();
                    subTotal = amount * price;
                    tableModel.setValueAt(formatter.format(price), affectedRow, PRICE_COLUMN);
                    tableModel.setValueAt(formatter.format(subTotal), affectedRow, SUBTOTAL_COLUMN);
                }
            }
            catch (NumberFormatException f)
            {
                JOptionPane.showMessageDialog(rootPane, "Ongeldig getal ingevoerd.");
                tableModel.setValueAt(0, affectedRow, AMOUNT_COLUMN);
                tableModel.setValueAt(formatter.format(0.00), affectedRow, SUBTOTAL_COLUMN);
            }
            catch (ParseException f)
            {
                JOptionPane.showMessageDialog(rootPane, "Ongeldig getal ingevoerd.");
                tableModel.setValueAt(0.00, affectedRow, PRICE_COLUMN);
                tableModel.setValueAt(formatter.format(0.00), affectedRow, SUBTOTAL_COLUMN);
            }
            catch (NullPointerException f)
            {

            }

            if (type == PresentationType.ORDERS)
            {
                subTotal = 0.00;
                for (int x = 0; x < tableModel.getRowCount(); x++)
                {
                    try
                    {
                        subTotal += formatter.parse(tableModel.getValueAt(x, SUBTOTAL_COLUMN).toString()).doubleValue();
                    }
                    catch (ParseException ex)
                    {
                        Logger.getLogger(PurchaseViewDialog.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                label_totalAmount.setText(formatter.format(subTotal));
            }
            tableModel.addTableModelListener(this);
        }
    }

    private String[] getHeaders()
    {
        String[] headers = (type == PresentationType.ORDERS) ? new String[]
        {
            "Naam", "Aantal", "Prijs per stuk", "Subtotaal"
        } : new String[]
        {
            "Naam", "Aantal"
        };
        return headers;
    }
}
