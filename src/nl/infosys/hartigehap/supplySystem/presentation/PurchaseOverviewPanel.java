/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nl.infosys.hartigehap.supplySystem.presentation;

import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import nl.infosys.hartigehap.supplySystem.businesslogic.IngredientManager;
import nl.infosys.hartigehap.supplySystem.businesslogic.PurchaseManager;
import nl.infosys.hartigehap.supplySystem.domain.Interface_PurchaseOrderReadOnly;

/**
 *
 * @author Gregor
 */
public class PurchaseOverviewPanel extends javax.swing.JPanel
{

    private CustomPurchaseCellRenderer tableRenderer;
    private CustomTableDataModel tableModel;
    private PurchaseManager purchasemanager;
    private IngredientManager ingredientManager;
    private PresentationType type;
    private DefaultComboBoxModel comboBoxModel;

    /**
     * Types this overview can handle
     */
    public static enum PresentationType
    {

        QUOTATIONS, ORDERS
    }

    /**
     * Creates new form OrderOverviewPanel
     *
     * @param purchasemanager
     * @param ingredientManager
     * @param type
     */
    public PurchaseOverviewPanel(PurchaseManager purchasemanager, IngredientManager ingredientManager, PresentationType type)
    {
        this.purchasemanager = purchasemanager;
        this.ingredientManager = ingredientManager;
        this.type = type;

        tableRenderer = new CustomPurchaseCellRenderer();
        tableModel = new CustomTableDataModel(getHeaders(type).toArray());
        comboBoxModel = new DefaultComboBoxModel(getHeaders(type, "Geen").toArray());

        initComponents();
        setOverviewData();
    }

    public void refresh()
    {
        this.setOverviewData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        button_newOrder = new javax.swing.JButton();
        combobox_orderBy = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_products = new nl.infosys.hartigehap.supplySystem.presentation.CustomJTable();

        setMinimumSize(new java.awt.Dimension(800, 450));
        setPreferredSize(new java.awt.Dimension(800, 450));

        button_newOrder.setText("Nieuwe Order");
        button_newOrder.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                button_newOrderActionPerformed(evt);
            }
        });

        combobox_orderBy.setModel(comboBoxModel);
        combobox_orderBy.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                combobox_orderByItemStateChanged(evt);
            }
        });

        jLabel1.setText("Sorteer met:");

        jLabel2.setText("Inkooporders overzicht");

        table_products.setModel(tableModel);
        table_products.setDefaultRenderer(Object.class, tableRenderer);
        table_products.getColumnModel().getColumn(0).setPreferredWidth(150);
        table_products.getColumnModel().getColumn(0).setMaxWidth(150);
        table_products.getColumnModel().getColumn(1).setPreferredWidth(300);
        table_products.getColumnModel().getColumn(2).setPreferredWidth(300);
        table_products.getColumnModel().getColumn(3).setPreferredWidth(300);
        if(type==PresentationType.ORDERS)
        {
            table_products.getColumnModel().getColumn(4).setPreferredWidth(300);
        }
        table_products.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                table_productsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(table_products);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(button_newOrder)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 444, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combobox_orderBy, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(combobox_orderBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button_newOrder)
                .addGap(10, 10, 10))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void button_newOrderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_button_newOrderActionPerformed
    {//GEN-HEADEREND:event_button_newOrderActionPerformed
        PurchaseCreateDialog editDialog = new PurchaseCreateDialog((JFrame) SwingUtilities.getWindowAncestor(this), purchasemanager, ingredientManager, type);
        editDialog.setVisible(true);
        if (editDialog.getDialogResult())
        {
            setOverviewData();
        }
    }//GEN-LAST:event_button_newOrderActionPerformed

    private void table_productsMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_table_productsMouseClicked
    {//GEN-HEADEREND:event_table_productsMouseClicked
        if (evt.getClickCount() > 1 && evt.isConsumed() == false)
        {
            PurchaseViewDialog viewDialog = new PurchaseViewDialog((JFrame) SwingUtilities.getWindowAncestor(this), ingredientManager, purchasemanager, type, (int) tableModel.getValueAt(table_products.convertRowIndexToModel(table_products.getSelectedRow()), 0));
            viewDialog.setVisible(true);
            if (viewDialog.getDialogResult())
            {
                setOverviewData();
            }
        }
    }//GEN-LAST:event_table_productsMouseClicked

    private void combobox_orderByItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_combobox_orderByItemStateChanged
    {//GEN-HEADEREND:event_combobox_orderByItemStateChanged
        if (combobox_orderBy.getSelectedIndex() == 0)
        {
            table_products.getRowSorter().setSortKeys(null);
        }
        else
        {
            table_products.getRowSorter().toggleSortOrder(combobox_orderBy.getSelectedIndex() - 1);
            //System.out.println(table_products.getRowSorter().getSortKeys());
        }
    }//GEN-LAST:event_combobox_orderByItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_newOrder;
    private javax.swing.JComboBox combobox_orderBy;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane3;
    private nl.infosys.hartigehap.supplySystem.presentation.CustomJTable table_products;
    // End of variables declaration//GEN-END:variables

//Private methods
    private void setOverviewData()
    {
        NumberFormat numberFormatter = new DecimalFormat("â‚¬ ###,##0.00");
        DateFormat dateformat = new SimpleDateFormat("dd-MM-YYYY");
        tableModel.setRowCount(0);
        if (type == PresentationType.ORDERS)
        {

            for (Interface_PurchaseOrderReadOnly order : purchasemanager.getPurchaseOrders())
            {
                tableModel.addRow(new Object[]
                {
                    order.getId(), order.getSupplier().getName(), dateformat.format(new Date(order.getTimestamp() * 1000)), order.getStatus().getPresentationString(), numberFormatter.format(order.getTotalPrice())
                });
            }
        }
        else
        {
            for (Interface_PurchaseOrderReadOnly order : purchasemanager.getPurchaseQuotations())
            {
                tableModel.addRow(new Object[]
                {
                    order.getId(), order.getSupplier().getName(), dateformat.format(new Date(order.getTimestamp() * 1000)), order.getStatus().getPresentationString()
                });
            }
        }
        table_products.updateRowHeight();
    }

    private List<String> getHeaders(PresentationType type)
    {
        return getHeaders(type, null);
    }

    private List<String> getHeaders(PresentationType type, String preHeader)
    {
        List<String> headers = new ArrayList<>();
        if (preHeader != null)
        {
            headers.add(preHeader);
        }
        headers.addAll((type == PresentationType.ORDERS) ? Arrays.asList(new String[]
        {
            "Order ID", "Leverancier", "Datum", "Status", "Totaal prijs"
        }) : Arrays.asList(new String[]
        {
            "Order ID", "Leverancier", "Datum", "Status"
        }));
        return headers;
    }
}
